" Common options {{{
syntax on
set nocompatible
set expandtab
set autoindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=8
set number
set mouse=
set incsearch
set ignorecase
set smartcase
set modeline
set foldmethod=manual
set nobomb
set viminfo=
set diffopt+=iwhite
set diffexpr=""

" }}}
" Vim-Plug setup {{{

call plug#begin('~/.vim/bundle')

" }}}
" Plugins       {{{
""" Sensible defaults """
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'duggiefresh/vim-easydir'
Plug 'ryanoasis/vim-devicons'
Plug 'chrisbra/unicode.vim'
Plug 'wellle/targets.vim'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }

""" File operations """
Plug 'ctrlpvim/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'jeetsukumaran/vim-buffergator'

""" Status Line and Color Schemes """
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'nightsense/stellarized'
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'hzchirs/vim-material'

""" Tmux """
Plug 'christoomey/vim-tmux-navigator'

""" Code (Generic)  """
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'preservim/nerdcommenter'
Plug 'metakirby5/codi.vim'
Plug 'machakann/vim-swap'

Plug 'luochen1990/rainbow'
let g:rainbow_active = 1

Plug 'neomake/neomake'
Plug 'ludovicchabant/vim-gutentags'

Plug 'mhinz/vim-signify'
let g:signify_vcs_list = [ 'hg', 'git' ]

Plug 'tpope/vim-fugitive'
Plug 'ludovicchabant/vim-lawrencium'

""" JS """
Plug 'mattn/emmet-vim'
Plug 'pangloss/vim-javascript'
Plug 'jaawerth/neomake-local-eslint-first'
Plug 'maksimr/vim-jsbeautify'

""" Python """
Plug 'jmcantrell/vim-virtualenv'
Plug 'pearofducks/ansible-vim'

""" todo.txt """
Plug 'dbeniamine/todo.txt-vim'

""" coc.nvim """
" Install Coc extensions via :CocInstall 
" See https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions
Plug 'neoclide/coc.nvim', {'branch': 'release'}

call plug#end()
" }}}
" todo.txt options {{{
autocmd BufNewFile,BufRead *.todo.txt set filetype=todo 
autocmd Filetype todo setlocal nofoldenable | RainbowToggleOff
autocmd Filetype todo RainbowToggleOff

if (!exists('g:todo_home')) 
  let g:todo_home="~/Nextcloud/todo" 
endif
function! OpenTodo(...)
    if a:1 == ''
        execute 'edit '.g:todo_home.'/todo.txt'
    else
        execute 'edit '.g:todo_home.'/'.a:1.'.todo.txt'
    endif
endfunction
command -nargs=? Todo call OpenTodo('<args>')
" }}}
" coc.nvim Options {{{
"TODO: Simplify this mess
set updatetime=100

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
" nmap <silent> <C-s> <Plug>(coc-range-select)
" xmap <silent> <C-s> <Plug>(coc-range-select)
" Disabled to make way for tmux wincmd mappings

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" }}}
" Tmux navigation {{{

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-s>h :TmuxNavigateLeft<cr>
nnoremap <silent> <C-s>j :TmuxNavigateDown<cr>
nnoremap <silent> <C-s>k :TmuxNavigateUp<cr>
nnoremap <silent> <C-s>l :TmuxNavigateRight<cr>
" }}}
" Grep w/Silver Searcher {{{
" https://thoughtbot.com/blog/faster-grepping-in-vim
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  "let g:ctrlp_use_caching = 0
endif

nnoremap <leader>g :grep! "\b<cword>\b"<CR>:cw<CR>
" }}}
" CtrlP options {{{

let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_root_markers = ['pom.xml', 'package.json', 'bower.json', 'setup.py']
set wildignore+=*.class,*.pyc,*.java-CACHE
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|\.hg|\.svn|node_modules)$',
  \ }
nnoremap <leader>f :CtrlPBuffer<C-M>
" }}}
" File type options {{{

" HTML (tab width 4 chr, no wrapping)
autocmd FileType html,xhtml,htmldjango set sw=4
autocmd FileType html,xhtml,htmldjango set ts=4
autocmd FileType html,xhtml,htmldjango set sts=4
" Python (tab width 4 chr, wrap at 79th char)
autocmd FileType python set sw=4
autocmd FileType python set ts=4
autocmd FileType python set sts=4
" CSS (tab width 2 chr, wrap at 79th char)
autocmd FileType css set sw=2
autocmd FileType css set ts=2
autocmd FileType css set sts=2
" JavaScript (tab width 2 chr, wrap at 79th)
autocmd FileType javascript,jade set sw=2
autocmd FileType javascript,jade set ts=2
autocmd FileType javascript,jade set sts=2
autocmd FileType javascript,*.javascript set makeprg=npm
" }}}
" Folding Options {{{

nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
" }}}
" Neomake options {{{

call neomake#configure#automake('nrwi', 100)
let g:neomake_yaml_ansible_enabled_makers = ['ansiblelint']
let g:neomake_yaml_ansible_ansiblelint_errorformat = '%f:%l: [%t%n] %m'
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_open_list = 2

autocmd BufNewFile,BufRead *.template set filetype=cloudformation.yaml
let g:neomake_cloudformation_cfnlint_maker = {
    \ 'exe': 'cfn-lint',
    \ 'args': ['--format=parseable'],
    \ 'errorformat':
        \ '%f:%l:%c:%\\d%\\+:%\\d%\\+:%t%n:%m',
    \ }
let g:neomake_cloudformation_enabled_makers = ['cfnlint']
" }}}
" Gutentags options {{{

let g:gutentags_cache_dir="~/.vim/tags"
let g:gutentags_ctags_exclude = ['coverage', '.nyc_output', '.vscode', 'node_modules', 'gitcommit', 'gitconfig', 'gitrebase', 'gitsendemail', 'git']
let g:gutentags_exclude_filetypes = ['gitcommit', 'gitconfig', 'gitrebase', 'gitsendemail', 'git']
let g:airline#extensions#gutentags#enabled = 1
" }}}
" Color Options {{{

set termguicolors
let g:enable_bold_font = 1
let g:enable_italic_font = 1
set background=dark
silent! colorscheme vim-material
" }}}
" Airline options {{{

if !has('nvim')
  set term=xterm-256color
endif
set showtabline=0
set laststatus=2
set guifont=MesloLGLDZ\ Nerd\ Font\ 10
let g:airline_powerline_fonts = 1
let g:airline_theme='material'
" }}}
" Tagbar Options {{{
nnoremap <leader>t :TagbarToggle<CR>
" }}}
" NERDCommenter Options {{{
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1
" }}}
" NERDTree Options {{{
nnoremap <leader>x :NERDTreeToggle<CR>

" Thanks https://superuser.com/a/474298/383630 and https://gist.github.com/avesus/1954d9384d86cc1e39cb2b2eff7017b7
" calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! s:isNTOpen()
" returns true iff is NERDTree open/active
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

function! s:syncTree()
  let s:curwnum = winnr()
  if &modifiable && s:isNTOpen() && strlen(expand('%')) > 0 && !&diff && expand('%') !~ "NERD_tree_.*"
      NERDTreeFind
      exec s:curwnum . "wincmd w"
  endif
endfunction

function! s:syncTreeIf()
  if (winnr("$") > 1)
    call s:syncTree()
  endif
endfunction

" Shows NERDTree on start and synchronizes the tree with opened file when switching between opened windows
autocmd BufEnter * call s:syncTreeIf()
" }}}
" Markdown Preview Options {{{
" set to 1, nvim will open the preview window after entering the markdown buffer
let g:mkdp_auto_start = 0 
" }}}
" Codi.vim Options {{{

"Width of the codi side pane as a percentage of the current buffer width
let g:codi#width = 40.0
let g:codi#rightalign = 0
" }}}
" jsbeautify Options {{{
au Filetype json vnoremap <leader>j :call RangeJsonBeautify()<CR>
au Filetype json nnoremap <leader>j :call JsonBeautify()<CR>
au Filetype javascript vnoremap <leader>j :call RangeJsBeautify()<CR>
au Filetype javascript nnoremap <leader>j :call JsBeautify()<CR>
" }}}
" Extra Options {{{

" From https://www.hillelwayne.com/post/intermediate-vim/
" shows you in realtime what changes your ex command should make (neovim only)
set inccommand=nosplit
" Make j/k move by wrapped line 
nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')

au BufNewFile,BufRead Jenkinsfile setf groovy

"Faster searching for slashes
cnoremap <expr> /  getcmdtype() == '/' ? '\/' : '/'

""" Extra save commands """
command W :execute ':silent w !sudo tee % > /dev/null' | :edit!
command WQ :execute ':W' | :q
command Wq :execute ':W' | :q
nnoremap <leader>ss :wa<CR>
nnoremap <leader>sq :wqa<CR>
" }}}
vim:set et sw=2 ts=8 tw=78 foldmethod=marker:
